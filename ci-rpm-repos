#!/bin/bash

# ENTRY POINT (done)

set -e

project="$1"
branch="$2"
if [ -n "$3" ]; then
	extraverdir="/$3"
	extraver="-$3"
fi

if [ -z "$project" ]; then
	echo "no project specificed"
	exit 1
fi

if [ -z "$branch" ]; then
	echo "no branch specificed"
	exit 1
fi

rpmdir=/var/www/ci.kronosnet.org/builds

retainbuilds=5
if [ "$project" = "kernel" ]; then
	retainbuilds=1
fi

clean_dirs() {
	echo "Purging 0 byte files"
	find $rpmdir/ -type f -size 0 -print -delete

	echo "Purging empty dirs"
	find $rpmdir/ -type d -empty -print -delete
}

process_pr() {
	cd $branch
	for i in $(ls); do
		echo processing $i
		cd $i
		createrepo --compress-type=gz .
		cd -
	done
	cd -
	cd $rpmdir/$project/pr
	find . -type f -mtime +30 -exec rm -rf {} \;
	cd -
}

process_publish() {
	for i in $(ls | grep -v pr); do
		cd $rpmdir/$project/
		echo "Processing $i"

		cd $i

		if [ ! -d ${branch}${extraverdir} ]; then
			continue
		fi

		toplevelbranch=$(basename $branch)${extraver}
		rm -f ${toplevelbranch}
		ln -sf ${branch}${extraverdir} ${toplevelbranch}

		cd $toplevelbranch

		# createrepo on latest and update symlinks
		lastbuild="$(ls -1 | sort -n | tail -n 1)"
		echo "Last build detected: $lastbuild"
		cd $lastbuild
		createrepo --compress-type=gz .
		cd ..
		rm -f latest
		ln -sf $lastbuild latest

		# remove old builds
		builds="$(ls -1 | grep -v latest | sort -n)"
		numbuilds="$(echo "$builds" | wc -l)"
		if [ "$numbuilds" -gt "$retainbuilds" ]; then
			purgenum=$((numbuilds - retainbuilds))
			candidates="$(echo "$builds" | head -n $purgenum)"
			for x in $candidates; do
				echo "Removing old build: $x"
				rm -rf $x
			done
		fi
	done

	# generate repo files
	cd $rpmdir/

	for i in $(ls | grep -v repo | grep -v stacks); do
		# project level
		cd $i

		for x in $(ls | grep -v "^pr"); do
			# builder level
			cd $x

			for b in $(ls |grep -v origin); do

			echo "Creating $i-$b-$x repo file"
			cat > $rpmdir/$i-$b-$x.repo << EOF
[$i-$b-$x]
name=$i-$b-$x
baseurl=https://ci.kronosnet.org/builds/$i/$x/$b/latest/
repo_gpgcheck=0
enabled=1
gpgcheck=0
metadata_expire=1d
skip_if_unavailable=True
module_hotfixes=1
priority=1
EOF

			done

			cd - >/dev/null 2>&1
		done

		cd .. >/dev/null 2>&1
	done

	# used for fn testing
	cd $rpmdir/stacks

	for i in $(ls); do
		# stable / next-stable / main level
		cd $i
		for x in $(ls); do
			# rhel release
			echo "Creating $i-$x repo file"
			cat > $rpmdir/stacks-$i-$x.repo << EOF
[$i-$x]
name=$i-$x
baseurl=https://ci.kronosnet.org/builds/stacks/$i/$x/
repo_gpgcheck=0
enabled=1
gpgcheck=0
metadata_expire=1d
skip_if_unavailable=True
module_hotfixes=1
priority=1
EOF
			if [ -h "$x" ]; then
				continue
			fi
			cd $x
			createrepo --compress-type=gz .
			cd ..
		done
		cd ..
	done
}

clean_dirs
echo "Updating all rpm repos for project: $project branch: $branch extraver: $3"

cd $rpmdir/$project/

case $branch in
    pr*)
	process_pr
	;;
    *)
	process_publish
	;;
esac

rsync -av --delete-after $rpmdir/ jweb:$rpmdir/.
rsync -av --delete-after $rpmdir/ rhel-9-vapor-rdu-1-x86-64:/var/www/html/builds/.

exit 0
