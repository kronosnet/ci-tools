[ -z "$BUILD" ] && BUILD="$1"
[ -z "$REPOSRC" ] && REPOSRC="$2"
[ -z "$ANVILSRC" ] && ANVILSRC="$3"

[ -z "$TESTS" ] && TESTS="$4"
[ -z "$TESTS" ] && TESTS="all"

BREAKPOINT="$6"

[ -z "$BREAKPOINT" ] && BREAKPOINT=none

# fake it when building outside of CI
[ -z "$BUILD_NUMBER" ] && BUILD_NUMBER=0

# common strategy to cleanup all VMs
destroy_vm() {
 vm="$1"
 if virsh dominfo $vm >/dev/null 2>&1; then
  if ping -c 1 $vm >/dev/null 2>&1; then
   ssh $vm rhc disconnect || true
   ssh $vm insights-client --unregister || true
   ssh $vm subscription-manager unregister || true
   sleep 2
  fi
  virsh destroy $vm || true
  virsh undefine $vm || true
 fi
}

cleanup_simengine() {
 echo "Cleaning up simengine configuration"
 systemctl stop simengine-core
 simengine-cli model drop
 systemctl start simengine-core
}

case "$BUILD" in
 centos-8-stream)
  SRCURL=https://cloud.centos.org/
  SRCPATH=/centos/8-stream/x86_64/images/
  IMG="GenericCloud"
  NAME="Centos 8 Stream"
  KVMVAR="centos-stream8"
 ;;
 rhel-8)
  NAME="RHEL 8"
  KVMVAR="rhel8-unknown"
  CRED="$HOME/rh-cred"
 ;;
 almalinux-9)
  SRCURL=https://repo.almalinux.org/
  SRCPATH=/almalinux/9/cloud/x86_64/images/
  IMG="GenericCloud"
  NAME="AlmaLinux 9"
  KVMVAR="rhel9-unknown"
 ;;
 rhel-9)
  NAME="RHEL 9"
  KVMVAR="rhel9-unknown"
  CRED="$HOME/rh-cred"
 ;;
 none)
 ;;
 *)
  echo "Unknown build: $BUILD"
  exit 1
 ;;
esac

ANVILDEPS=false
ALTEEVE=false
ALTEEVESTAGING=false
PRREPO=false

case "$REPOSRC" in
 ci)
  ANVILDEPS=true
 ;;
 enterprise)
  ALTEEVE=true
 ;;
 enterprise-staging)
  ALTEEVESTAGING=true
 ;;
 none)
 ;;
 *)
  echo "Unknown repo src: $REPOSRC"
  exit 1
 ;;
esac

ANVIL=false

case "$ANVILSRC" in
 ci)
  ANVIL=true
 ;;
 pr*)
  PRREPO=true
  PRNUM=$(echo $ANVILSRC | sed -e 's#pr/##g')
 ;;
 none)
 ;;
 *)
  echo "Unknown anvil src: $ANVILSRC"
  exit 1
 ;;
esac

export DEPLOYDIR=/srv/anvil
export TEMPLATESDIR="$HOME/ci-tools/anvil-config-templates"
export STRIKERS="an-striker01 an-striker02"
export NODES="an-a01n01 an-a01n02"
export DRNODES="an-a01dr01"
export CACHENODES="an-cache"
export ALLNODES="$STRIKERS $NODES $DRNODES"
export PGPASSWORD=supersecretpassword

if [ ! -d "$TEMPLATESDIR" ]; then
 echo "Error, unable to find anvil-config-templates in the current directory"
 exit 1
fi

rsync -a anvil-ci-proxy:ci-creds/* $HOME/

if [ -n "$CRED" ]; then
 if [ ! -f "$CRED" ]; then
  echo "Unable to access $CRED file"
  exit 1
 fi
 export ORG=$(cat "$CRED" | grep ORG | awk '{print $2}')
 export KEY=$(cat "$CRED" | grep KEY | awk '{print $2}')
 if [ -z "$ORG" ] || [ -z "$KEY" ]; then
  echo "CRED file should contain both KEY and ORG"
  exit 1
 fi
fi

if [ ! -f "$HOME/alteeve-key" ]; then
 echo "Unable to access alteeve-key"
 exit 1
fi

export AKEY=$(cat $HOME/alteeve-key)

mkdir -p "$DEPLOYDIR/images"
mkdir -p "$DEPLOYDIR/cache"
mkdir -p "$DEPLOYDIR/snapshots"
mkdir -p "$DEPLOYDIR/configs"

echo "Genering ssh keys and ssh config"

cd "$DEPLOYDIR/configs"

if [ ! -f "id_rsa" ]; then
 echo "Generaing ssh keys"
 ssh-keygen -t rsa -b 4096 -f id_rsa -C testing-key -N "" -q
 echo ""
fi

export SSHKEY="$(cat $DEPLOYDIR/configs/id_rsa.pub)"

if [ ! -f $HOME/.ssh/config ]; then
 cat > $HOME/.ssh/config << EOF
Host 192.168.122.*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no

Host an-*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no
EOF
fi

rm -f $HOME/.ssh/known_hosts
ssh-keyscan github.com > $HOME/.ssh/known_hosts
