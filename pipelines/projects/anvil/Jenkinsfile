// Jenkinsfile for the anvil project

@Library(['GlobalLib', 'GithubLib', 'ProjectLib']) _

// Who we are
def project = 'anvil'
def anvilsrc = ''
def anviltests = 'all'
def info = [:]

// Pipeline code starts here
pipeline {
    // Start on the main Jenkins node. Build jobs are distributed inside 'parallel' below
    agent { label 'built-in' }

    // Things that external jobs might want to influence
    parameters {
	string(name: 'bootstrap',   defaultValue: '0', description: 'Bootstrap the RPM repos')
	string(name: 'fullrebuild', defaultValue: '0', description: 'This is a full rebuild - do not publish RPM and do NOT update build code on the nodes')
    }

    environment {
	ISDRAFTOVERRIDE = '1'
    }

    stages {
	// First check we are allowed to run, then set some params for that run
	stage('Setup build env') {
	    steps {
		script {
		    getBuildInfo(project, info)
		    // set anvilsrc based on PR
		    if (info['isPullRequest']) {
			anvilsrc = "pr/${info['pull_id']}"
		    } else {
			anvilsrc = "ci"
		    }
		    // For special jobs (manual override)
		    if (info['is_draft']) {
			anviltests = 'all,skip_advanced_servers,skip_update'
			info['is_draft'] = false
		    }
		}
	    }
	}

        // This is the main stage - building and testing
	stage('Main stage') {
	    when {
		// getAuthCheck (in getBuildInfo) will usually abort the job if permission is denied,
		// but this is an extra check.
		expression { info['authcheck'] == true && info['is_draft'] == false }
	    }

	    // All of the stages that actually do stuff
	    steps {
		script {
		    cleanWs(disableDeferredWipeout: true, deleteDirs: true)

		    voting = buildRunMap('voting', info, ['voting': true,
							  'nodelabel': 'anvilvoting'])

		    buildrpms = buildRunMap('buildrpms', info, ['voting': true,
		                                                'nodelabel': 'anvilbuildrpms'])

		    // Run them (errors are caught in info[:])
		    try {
			parallel voting + buildrpms
		    } catch (err) {
			println("Jenkinsfile caught "+err)
			info['exception_text'] += "\nparallel error caught: {$err}\n"
		    }
		}
	    }
	}

        // Build the RPM/Coverity repos etc. If the job failed, this is what tells Jenkins
	stage('Post Stage') {
	    when {
		expression { info['authcheck'] == true && info['is_draft'] == false }
	    }
	    steps {
		postStage(info)
	    }
	}

	stage('functional testing') {
	    when {
		expression { info['authcheck'] == true && info['is_draft'] == false && info['bootstrap'] == 0 && info['target'] == 'main'}
	    }
	    steps {
		script {
		    def fntesting = doBuildJob("${project}/${project}-build-all-functional-testing",
					       [string(name: 'ANVILSRC', value: "${anvilsrc}"),
						string(name: 'TESTS', value: "${anviltests}")],
					       info)

		    def buildnumber = fntesting.getNumber()

		    if (fntesting.result != 'SUCCESS') {
			info['email_extra_text'] = "\nfunctional testing failed:\n"
			catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
			    shNoTrace("exit 1", "Marking this stage as a failure")
			}
		    } else {
			info['email_extra_text'] = "\nfunctional testing results:\n"
		    }
		    info['email_extra_text'] += "https://ci.kronosnet.org/job/anvil/job/anvil-build-all-functional-testing/${buildnumber}/\n"
		}
	    }
	}
    }

    // Finish up and send emails
    post {
	always {
	    projectFinishUp(info)
	}
    }
}
