// Jenkinsfile for the gfs2-utils project

@Library(['GlobalLib', 'PagureLib', 'ProjectLib']) _

// Globals
def project = 'gfs2-utils'
def upstream_repo = "https://pagure.io/${project}.git"
def info = [:]

pipeline {
    agent { label 'built-in' }

    parameters {
	string(name: 'bootstrap',   defaultValue: '0', description: 'Bootstrap the RPM repos')
	string(name: 'fullrebuild', defaultValue: '0', description: 'This is a full rebuild - do not publish RPM and do NOT update build code on the nodes')
    }

    options {
	skipDefaultCheckout(true)
    }

    stages {
	// First check we are allowed to run, then set some params for that run
	stage('Validate build env') {
	    steps {
		script {
		    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
		    getBuildInfo(project, upstream_repo, info)
		}
	    }
	}
	// This is the main stage that covers everything
	stage('Main stage') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { info['authcheck'] == true && info['tracking'] == true }
	    }
	    steps {
		script {
		    cleanWs(disableDeferredWipeout: true, deleteDirs: true)

		    def voting = buildRunMap('voting', info, ['voting': true,
							  'nodelabel': 'voting',
							  'excludes': 'freebsd.*'])

		    def nonvoting = buildRunMap('nonvoting', info, ['voting': false,
								'nodelabel': 'nonvoting',
								'excludes': 'freebsd.*'])

		    def nonvoting_clang = buildRunMap('nonvoting-clang', info, ['voting': false,
									    'nodelabel': 'nonvoting-clang',
									    'excludes': 'freebsd.*',
									    'extravars': ['compiler': 'clang',
											  'install': 0]])

		    def covscan = buildRunMap('covscan', info, ['voting': true,
							    'nodelabel': 'covscan'])

		    def buildrpms = buildRunMap('buildrpms', info, ['voting': true,
								'nodelabel': 'buildrpms'])

		    try {
			parallel voting + nonvoting + nonvoting_clang + buildrpms + covscan
		    } catch (err) {
			println("Jenkinsfile caught "+err)
			info['exception_text'] += "\nparallel error caught: {$err}\n"
		    }
		}
	    }
	}
	stage('Post stage') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { info['authcheck'] == true && info['tracking'] == true }
	    }
	    steps {
		postStage(info)
	    }
	}
    }
    post {
	always {
	    projectFinishUp(info)
	}
    }
}
