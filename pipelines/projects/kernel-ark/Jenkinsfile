// Jenkinsfile for the kernel-ark project

@Library(['GlobalLib', 'VaporLib', 'ProjectLib']) _

// Globals
def project = 'kernel-ark'
def projectid = 'kft'
def info = [:]

// kernel-ark overrides
def provider = 'ocpv'
def fromnodes = 3
def tonodes = 3
def osver = 'rhel9'
def zstream = 'yes'
def upstream = 'next-stable'
def iscsi = '0'
def block = '200'
def testvariant = 'kernel'
def tests = 'all'

pipeline {
    agent { label "kbuild" }

    parameters {
	string(name: 'testlist', defaultValue: 'auto', description: 'override auto generated test list. Set to empty to skip running tests')
	string(name: 'taglist', defaultValue: 'auto', description: 'override auto generated tag list. Set to empty to skip running tags')
	string(name: 'testtimeout', defaultValue: '180', description: 'timeout for running any test (in minutes)')
	string(name: 'tagtimeout', defaultValue: '360', description: 'timeout for running any tag (in minutes)')
	string(name: 'dryrun', defaultValue: '0', description: 'set to 1 to see what the pipeline would do, without actually doing anything')
	string(name: 'echorun', defaultValue: 'no', description: 'ECHO all vapor commands rather than running them (debug option).')
    }

    options {
	// This is required if you want to clean before build
	// and kernel build is done via cache clone
	skipDefaultCheckout(true)
    }

    environment {
	BUILDNODE = "${env.NODE_NAME}"
	BUILDDIR = "${env.WORKSPACE}"
	CACHEDIR = '/srv/kcache'
    }

    stages {
	stage('Validate build env') {
	    steps {
		script {
		    getBuildInfo(project, projectid, info)
		    info['provider'] = provider
		    info['fromnodes'] = fromnodes
		    info['tonodes'] = tonodes
		    info['osver'] = osver
		    info['zstream'] = zstream
		    info['upstream'] = upstream
		    info['customrepo'] = "${env.WORKSPACE}/rpms"
		    info['iscsi'] = iscsi
		    info['block'] = block
		    info['tests'] = tests
		    info['testvariant'] = testvariant
		    info['testlist'] = "${params.testlist}"
		    info['taglist'] = "${params.taglist}"
		    info['testtimeout'] = "${params.testtimeout}" as int
		    info['tagtimeout'] = "${params.tagtimeout}" as int

		    println("info map: ${info}")

		    stage('Prep workspace') {
			cleanWs(disableDeferredWipeout: true, deleteDirs: true)
			delete_cluster(info)
		    }
		}
	    }
	}
	stage('kernel build') {
	    when {
		expression { info['dryrun'] == '0' && "${params.echorun}" == 'no' }
	    }
	    options {
		lock('kernel-build')
	    }
	    stages {
		// This is the main stage that covers everything
		stage('Populating kernel-ark cache') {
		    steps {
			sh '''
			    mkdir -p $CACHEDIR
			    if [ ! -d $CACHEDIR/kernel-ark ]; then
				cd $CACHEDIR
				echo "Cloning kernel-ark.git"
				git clone https://gitlab.com/cki-project/kernel-ark.git
			    fi
			'''
		    }
		}
		stage('Adding remotes') {
		    steps {
			sh '''
			    cd $CACHEDIR/kernel-ark
			    if ! git remote get-url gfs2; then
				echo "Adding remote linux-gfs2.git"
				git remote add gfs2 git://git.kernel.org/pub/scm/linux/kernel/git/gfs2/linux-gfs2.git
			    fi
			    if ! git remote get-url dlm; then
				echo "Adding remote linux-dlm.git"
				git remote add dlm git://git.kernel.org/pub/scm/linux/kernel/git/teigland/linux-dlm.git
			    fi
			    if ! git remote get-url kernel-ark-config; then
				echo "Adding remote kernel-ark.git for config"
				git remote add kernel-ark-config https://gitlab.com/linux-gfs2/kernel-ark.git
			    fi
			'''
		    }
		}
		stage('Updating remotes') {
		    steps {
			sh """
			    cd $CACHEDIR/kernel-ark
			    remotes=\$(git remote)
			    for remote in \$remotes; do
				echo == fetch \$remote ==
				git fetch \$remote
			    done
			    echo == reset tree to origin/os-build ==
			    git reset --hard origin/os-build
			    echo == clean tree ==
			    git clean -dfx
			"""
		    }
		}
		stage('Cloning cache to build workspace') {
		    steps {
			sh '''
			    echo == clone tree to build dir ==
			    cd $BUILDDIR
			    rsync -a $CACHEDIR/kernel-ark .
			'''
		    }
		}
		stage('Merging trees') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    for branch in gfs2/for-next dlm/next kernel-ark-config/ci_test_config; do
				if ! git merge-base --is-ancestor "$branch" HEAD; then
				    git merge --log=999 --no-ff -m "Automatic merge of $branch" $branch
				    git show --no-patch
				fi
			    done
			'''
		    }
		}
		stage('Installing BuildRequires') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == install BuildRequires ==
			    yum -y install system-sb-certs libpfm-devel libunwind-devel python3-wheel java-devel bindgen clippy rustfmt rust-src liburing-devel
			'''
		    }
		}
		stage('Build srpm') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == build srpm ==
			    make -j $(nproc) dist-srpm
			'''
		    }
		}
		stage('Build rpms') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == build rpms ==
			    srcrpm=$(ls -1 redhat/rpm/SRPMS/kernel-*.src.rpm)
			    RPMBUILDOPTS="--without debug --without doc --without realtime --without automotive --without ynl"

			    CIRPMDIR=$(pwd)/ci-test-rpms
			    rm -rf $CIRPMDIR
			    mkdir -p $CIRPMDIR

			    rpmbuild \
				--define "_sourcedir $CIRPMDIR/SOURCES" \
				--define "_specdir $CIRPMDIR/SPECS" \
				--define "_builddir $CIRPMDIR/BUILD" \
				--define "_buildrootdir $CIRPMDIR/BUILDROOT" \
				--define "_srcrpmdir $CIRPMDIR/SRPM" \
				--define "_rpmdir $CIRPMDIR/RPMS" \
				$RPMBUILDOPTS \
				-rb $srcrpm

			    mkdir -p $BUILDDIR/rpms
			    find . -name "*.rpm" -exec mv {} $BUILDDIR/rpms \\;
			'''
		    }
		}
		stage('Collect rpms') {
		    steps {
			node('built-in') {
			    timeout (time: 15, unit: 'MINUTES') {
				sh "$HOME/ci-tools/ci-wrap ci-get-artifacts ${BUILDNODE} ${BUILDDIR}/rpms builds/kernel/rhel-9-kbuild/origin/${BRANCH_NAME}/${BUILD_NUMBER}/ rpm"
				script {
				    info['repo_urls'] = ["https://ci.kronosnet.org/" + "builds/kernel/rhel-9-kbuild/origin/${BRANCH_NAME}/${BUILD_NUMBER}/"]
				}
			    }
			}
		    }
		}
		stage('Publish rpms') {
		    steps {
			node('built-in') {
			    RWLock(info, 'ci-rpm-repos', 'WRITE', 'kernel-ark', {
				timeout (time: 60, unit: 'MINUTES') {
				    sh "$HOME/ci-tools/ci-wrap ci-rpm-repos kernel origin/${BRANCH_NAME}"
				}
			    })
			}
		    }
		}
	    }
	}
	stage('kernel testing') {
	    stages {
		stage('Create test cluster') {
		    steps {
			create_cluster(info)
		    }
		}
		stage('Deploy test cluster') {
		    steps {
			deploy_cluster(info)
		    }
		}
		stage('Run tests') {
		    steps {
			script {
			    run_functional_tests(info)
			}
		    }
		}
	    }
	}
    }

    post {
	always {
	    delete_cluster(info)
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	    node('built-in') {
		script {
		    info['emailOptions'] = 'showTop'
		    projectFinishUp(info)
		}
	    }
	}
    }
}
