@Library(['GlobalLib', 'ProjectLib']) _

def info = [:]
def project = 'kubesan'

def test_list = ''
def ret = 'SUCCESS'
def testret = ''

pipeline {
    agent { label 'kubesan' }

    options {
	gitLabConnection('gitlab-knet-ci-bot')
	skipDefaultCheckout(true)
    }

    stages {
	stage('Prep build env') {
	    steps {
		updateGitlabCommitStatus(name: 'Prep build env', state: 'running')
		script {
		    getBuildInfoCommon(info)
		    sh """
			env -0 | sed -z 's/\\/\\\\/g; s/\n/\\n/g' | tr '\0' '\n' | sort
		    """
		    node('built-in') {
			lock('gitlab-jenkins-gw') {
			    timeout (time: 60, unit: 'MINUTES') {
				sh "$HOME/ci-tools/ci-wrap ci-gitlab-jenkins-gw started ${ret}"
			    }
			}
		    }
		    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
		    checkout scm
		    cleanKube()
		    test_list = sh (label: 'Gather test list', returnStdout: true,
			script: 'ls -1 tests/t/*.sh | sed -e "s#.*/##g" -e "s#\\.sh\\$##g"').trim()
		}
		updateGitlabCommitStatus(name: 'Prep build env', state: 'success')
	    }
	}
	stage('Build container') {
	    steps {
		updateGitlabCommitStatus(name: 'Build container', state: 'running')
		script {
		    try {
			sh (label: 'Run local build',
			    script: """
				su - kubesan /bin/bash -c "cd ${WORKSPACE}; ./containerized-build.sh"
			    """)
		    } catch (err) {
			updateGitlabCommitStatus(name: 'Build container', state: 'failed')
			ret = 'FAILED'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
			    shNoTrace("exit 1", "Marking this stage as a failure")
			}
			error('Build failure')
		    }
		}
		updateGitlabCommitStatus(name: 'Build container', state: 'success')
	    }
	}
	stage('Create test env cache') {
	    steps {
		updateGitlabCommitStatus(name: 'Create test env cache', state: 'running')
		script {
		    try {
			RWLock(info, 'kubesan-cache','READ', 'kubesan', {
			    sh (label: 'Create test env cache',
				script: """
				    su - kubesan /bin/bash -c "cd ${WORKSPACE}; ./tests/run.sh --external-registry 10.6.23.119:5000 create-cache"
				""")
			})
		    } catch (err) {
			updateGitlabCommitStatus(name: 'Create test env cache', state: 'failed')
			ret = 'FAILED'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
			    shNoTrace("exit 1", "Marking this stage as a failure")
			}
			error('Build failure')
		    }
		}
		updateGitlabCommitStatus(name: 'Create test env cache', state: 'success')
	    }
	}
	stage('Run tests') {
	    steps {
		script {
		    for (test in test_list.split()) {
			testret = 'success'
			updateGitlabCommitStatus(name: "Test: ${test}", state: 'running')
			stage("Run ${test}") {
			   try {
				sh """
				    su - kubesan /bin/bash -c "cd ${WORKSPACE}; ./tests/run.sh --use-cache tests/t/${test}.sh"
				"""
			   } catch (err) {
				ret = 'FAILED'
				testret = 'failed'
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
				    shNoTrace("exit 1", "Marking this stage as a failure")
				}
			   }
			}
			updateGitlabCommitStatus(name: "Test: ${test}", state: "${testret}")
		    }
		}
	    }
	}
    }
    post {
	always {
	    node('built-in') {
		lock('gitlab-jenkins-gw') {
		    timeout (time: 60, unit: 'MINUTES') {
			sh "$HOME/ci-tools/ci-wrap ci-gitlab-jenkins-gw completed ${ret}"
		    }
		}
	    }
	    RWLock(info, 'UNLOCK')
	    cleanKube()
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	    script {
		currentBuild.result = ret
	    }
	}
    }
}
