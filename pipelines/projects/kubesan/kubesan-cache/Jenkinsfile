@Library(['GlobalLib', 'ProjectLib']) _

def info = [:]
def project = 'kubesan-cache'

def updatekclicache(String agentName, Map info)
{
    println("Running update-kcli-cache on ${agentName}")
    node("${agentName}") {
	cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	cleanKube()
	checkout changelog: false, poll: false, scm: [
	    $class: 'GitSCM',
	    branches: [[name: "origin/main"]],
	    userRemoteConfigs: [[name: 'origin', url: 'https://gitlab.com/kubesan/kubesan.git']]]
	    sh (label: 'Update test env cache',
		script: """
		    su - kubesan /bin/bash -c "cd ${WORKSPACE}; ./tests/run.sh --external-registry 10.6.23.119:5000 create-cache"
		""")
    }
}

def buildkcliRunMap(Map info)
{
    def collectBuildEnv = [:]
    def nodeList = getLabelledNodes('kubesan')

    for (n in nodeList) {
	def agentName = n
	collectBuildEnv[n] = {
	    updatekclicache(agentName, info)
	}
    }

    return collectBuildEnv
}

pipeline {
    agent { label 'kubesan-cache' }

    options {
	gitLabConnection('gitlab-knet-ci-bot')
	skipDefaultCheckout(true)
    }

    stages {
	stage('Clean build env') {
	    steps {
		script {
		    getBuildInfoCommon(info)
		}
	    }
	}
	stage('Build kubesan registry cache') {
	    steps {
		script {
		    withCredentials([usernamePassword(credentialsId: 'kubesan-docker', passwordVariable: 'docker_password', usernameVariable: 'docker_user')]) {
			RWLock(info, 'kubesan-cache', 'WRITE', 'kubesan', {
			    sh "$HOME/ci-tools/ci-wrap ci-kubesan-cache"
			})
		    }
		}
	    }
	}
	stage('Update kubesan kcli cache') {
	    steps {
		RWLock(info, 'kubesan-cache','READ', 'kubesan', {
		    script {
			def updates = buildkcliRunMap(info)
			try {
			    parallel updates
			} catch (err) {
			    println("Jenkinsfile caught "+err)
			    info['exception_text'] += "\nparallel error caught: {$err}\n"
			    info['state'] = 'Error'
			}
		    }
		})
	    }
	}
    }
    post {
	always {
	    RWLock(info, 'UNLOCK')
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	}
    }
}
